{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Network.RPC.Protopap.Proto (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Network.RPC.Protopap.Proto\", haskellPrefix = [], parentModule = [MName \"Network\",MName \"RPC\",MName \"Protopap\"], baseName = MName \"Proto\"}, protoFilePath = [\"Network\",\"RPC\",\"Protopap\",\"Proto.hs\"], protoSource = \"proto/rpc.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Network.RPC.Protopap.Proto.RPCRequest\", haskellPrefix = [], parentModule = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\"], baseName = MName \"RPCRequest\"}, descFilePath = [\"Network\",\"RPC\",\"Protopap\",\"Proto\",\"RPCRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Network.RPC.Protopap.Proto.RPCRequest.method\", haskellPrefix' = [], parentModule' = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\",MName \"RPCRequest\"], baseName' = FName \"method\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Network.RPC.Protopap.Proto.RPCResponse\", haskellPrefix = [], parentModule = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\"], baseName = MName \"RPCResponse\"}, descFilePath = [\"Network\",\"RPC\",\"Protopap\",\"Proto\",\"RPCResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Network.RPC.Protopap.Proto.RPCResponse.status\", haskellPrefix' = [], parentModule' = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\",MName \"RPCResponse\"], baseName' = FName \"status\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Network.RPC.Protopap.Proto.RPCResponse.Status\", haskellPrefix = [], parentModule = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\",MName \"RPCResponse\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Network.RPC.Protopap.Proto.RPCResponse.status_info\", haskellPrefix' = [], parentModule' = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\",MName \"RPCResponse\"], baseName' = FName \"status_info\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Network.RPC.Protopap.Proto.RPCResponse.Status\", haskellPrefix = [], parentModule = [MName \"Network\",MName \"RPC\",MName \"Protopap\",MName \"Proto\",MName \"RPCResponse\"], baseName = MName \"Status\"}, enumFilePath = [\"Network\",\"RPC\",\"Protopap\",\"Proto\",\"RPCResponse\",\"Status.hs\"], enumValues = [(EnumCode {getEnumCode = 1},\"OK\"),(EnumCode {getEnumCode = 2},\"RPC_ERROR\"),(EnumCode {getEnumCode = 3},\"APP_ERROR\")]}], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\224\SOH\n\SIproto/rpc.proto\DC2\SUBNetwork.RPC.Protopap.Proto\"\FS\n\nRPCRequest\DC2\SO\n\ACKmethod\CAN\SOH \SOH(\t\"\146\SOH\n\vRPCResponse\DC2>\n\ACKstatus\CAN\SOH \SOH(\SO2..Network.RPC.Protopap.Proto.RPCResponse.Status\DC2\DC3\n\vstatus_info\CAN\STX \SOH(\t\".\n\ACKStatus\DC2\ACK\n\STXOK\DLE\SOH\DC2\r\n\tRPC_ERROR\DLE\STX\DC2\r\n\tAPP_ERROR\DLE\ETX")